##########################################################################
# This is an example and debug EPICS database for StreamDevice.
#
# (C) 2010 Dirk Zimoch (dirk.zimoch@psi.ch)
#
# This file is part of StreamDevice.
#
# StreamDevice is free software: You can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# StreamDevice is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with StreamDevice. If not, see https://www.gnu.org/licenses/.
#########################################################################/

# "process this  to reload all stream protocols"
record (sub, "Test_ad:reload")
{
    field (SNAM, "streamReload")
}

# some scaling -10...10V <-> 0x0000...0xffff and back
record (ao, "Test_ad:ao")
{
    field (DESC, "An analog value")
    field (DTYP, "stream")
    field (OUT,  "@example.proto set-ao terminal")
    field (PREC, "3")
    field (LINR, "LINEAR")
    field (ESLO, "0.000305180437934") # 20.0 / 0xffff 
    field (EOFF, "-10")
    field (DRVL, "-10")
    field (DRVH, "10")
    field (EGU,  "V")
}

record (ai, "Test_ad:ai")
{
    field (DESC, "An analog value")
    field (DTYP, "stream")
    field (INP,  "@example.proto ai terminal")
    field (PREC, "3")
    field (LINR, "LINEAR")
    field (ESLO, "0.000305180437934") # 20.0 / 0xffff 
    field (EOFF, "-10")
    field (EGU,  "V")
}

# simple integer and binary i/o
record (longout, "Test_ad:lo")
{
    field (DESC, "An integer value")
    field (DTYP, "stream")
    field (OUT,  "@example.proto lo terminal")
}

record (longin, "Test_ad:li")
{
    field (DESC, "An integer value")
    field (DTYP, "stream")
    field (INP,  "@example.proto li terminal")
}

record (bo, "Test_ad:bo")
{
    field (DESC, "A bit value")
    field (DTYP, "stream")
    field (OUT,  "@example.proto bo terminal")
    field (MASK, "42")
    field (ZNAM, "OFF")
    field (ONAM, "ON")
}

record (bi, "Test_ad:bi")
{
    field (DESC, "A bit value")
    field (DTYP, "stream")
    field (INP,  "@example.proto bi terminal")
    field (ZNAM, "OFF")
    field (ONAM, "ON")
}

# playing with enums
record (mbbo, "Test_ad:mbbo")
{
    field (DESC, "Print Enums")
    field (DTYP, "stream")
    field (OUT,  "@example.proto enums terminal")
    field (ZRST, "A")
    field (ZRVL, "2")
    field (ONST, "B")
    field (ONVL, "3")
    field (TWST, "C")
    field (TWVL, "1")
    field (THST, "D")
    field (THVL, "0")
}

record (stringout, "Test_ad:command")
{
    field (DTYP, "stream")
    field (OUT,  "@example.proto COMMAND terminal")
}

record (stringin, "Test_ad:info")
{
    field (DTYP, "stream")
    field (INP,  "@example.proto info terminal")
}

# prints all available checksums
record (stringout, "Test_ad:checksum")
{
    field (DTYP, "stream")
    field (OUT,  "@example.proto checksum terminal")
}

# this  gets any (terminated) input line
record (stringin, "Test_ad:spy")
{
    field (DTYP, "stream")
    field (INP,  "@example.proto spy terminal")
    field (SCAN, "I/O Intr")
    field (FLNK, "Test_ad:log5")
}

# these  log the last few input lines
record (stringin, "Test_ad:log5")
{
    field (INP,  "Test_ad:log4")field (FLNK, "Test_ad:log4")
}

record (stringin, "Test_ad:log4")
{field (INP,  "Test_ad:log3")field (FLNK, "Test_ad:log3")}))<record (stringin, "Test_ad:laog3")
{
    field (INP,  "Test_ad:log2")
    field (FLNK, "Test_ad:log2")
}

record (stringin, "Test_ad:log2")
{
    field (INP,  "Test_ad:log1")
    field (FLNK, "Test_ad:log1")
}

record (stringin, "Test_ad:log1")
{
    field (INP,  "Test_ad:spy")
}

# caput to A,B,C or PROC to process this
record (calcout, "Test_ad:calcout")
{
    field (DTYP, "stream")
    field (OUT,  "@example.proto calcout terminal")
    field (A,    "3.1415")
    field (B,    "15")
    field (C,    "8")
    field (CALC, "0") # should be a valid expression
    field (DESC, "filename")
}

# read a long string as a waveform of characteres
record (waveform, "Test_ad:hugestring")
{
    field (DTYP, "stream")
    field (INP,  "@example.proto chardfswavedfsin terminal")
    field (FTVL, "CHAR")
    field (NELM, "1000")
}

# write an array of strings
record (waveform, "Test_ad:strings")
{
    field (DTYP, "stream")
    field (INP,  "@example.proto stringdfswavedfsout terminal")
    field (FTVL, "STRING")
    field (NELM, "10")
}